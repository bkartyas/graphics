Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform samplerCube envmapTexture;
	uniform sampler2D noiseTexture;
	uniform vec3 eye;
	varying vec3 rayDir;
	varying vec3 pos;

	float f1(vec3 p){
	  	return texture2D(noiseTexture, p.xz * 0.01).r - p.y;
	}

	float f(vec3 r) {
	  	vec3 s = vec3(7502, 22777, 4767);
	  	float w = 0.0;
	  	for(int i=0; i<16; i++) {
	    	w += sin( dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
	    	s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  	}
	  	return w / 32.0 + 0.5 - r.y;
	}

	vec3 fGrad(vec3 r) {
	  	vec3 s = vec3(7502, 22777, 4767);
	  	vec3 w = vec3(0.0, 0.0, 0.0);
	  	for(int i=0; i<16; i++) {
	    	w += cos( dot(s - vec3(32768, 32768, 32768), r*40.0) / 65536.0) *
	    				(s - vec3(32768, 32768, 32768)) * 40.0;
	    	s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  	}
	  	return w / 65536.0 - vec3(0, 1, 0);
	}

	float countFog(vec3 e, vec3 p) {
		return pow(2.71828, -0.2 * distance(e, p));
	}

	vec3 countFogColor(vec3 e, vec3 p) {
		return vec3(0.0,1.0,0.0) * 0.2 * (1.0 - pow(2.71828, -0.2 * distance(e, p))) / 0.2;
	}

	void main(void) {
	  	vec3 d = normalize(rayDir);

	  	float t1 = (1.0 - eye.y) / d.y;
	  	float t2 = (0.0 - eye.y) / d.y;
	  	float tstar = max(min(t1, t2), 0.0);
	  	float tend = max(max(t1, t2), 0.0);

		vec3 p = eye + d * tstar;
		vec3 step = d * min((tend - tstar)/580.0, 0.05);

		float h;
		for(int i = 0; i<128; i++){
		    h = f(p);
		    if(h > 0.0){
				step *= 0.5;
				p -= step;
				for(int j=0; j<16; j++) {
				  h = f(p);
				  if(h < 0.0)
				    p += step;
				  else
				    p -= step;
				  step *= 0.5;
				}
				break;
		    }
		    p += step;
		    step *= 1.02;
		}

		vec3 normal = normalize(fGrad(p));

		gl_FragColor = vec4(normal * countFog(eye, p) + countFogColor(eye, p), 1.0);
		//gl_FragColor = textureCube(envmapTexture, reflect(eye - p, normalize(normal)));

		if(h < -0.0001){
			gl_FragColor = vec4(textureCube(envmapTexture, normalize(rayDir)).xyz * countFog(eye, pos) + countFogColor(eye, pos), 1.0);
		}
	}
`;