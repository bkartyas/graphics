Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform samplerCube envmapTexture;
	uniform vec3 eye;
	uniform vec3 ball1;
	uniform vec3 ball2;
	uniform vec3 ball3;
	uniform vec3 ball4;
	varying vec3 rayDir;
	varying vec3 pos;

	float f(vec3 r) {
		float b1 = distance(r, ball1) / 1.0;
		float b2 = distance(r, ball2) / 1.0;
		float b3 = distance(r, ball3) / 1.0;
		float b4 = distance(r, ball4) / 1.0;
		float bl1 = 1.0 / pow(b1, b1);
		float bl2 = 1.0 / pow(b2, b2);
		float bl3 = 1.0 / pow(b3, b3);
		float bl4 = 1.0 / pow(b4, b4);
	  	return -1.0 + bl1 + bl2 + bl3 + bl4;
	}

	vec3 fGrad(vec3 r) {
		float d1 = distance(r, ball1);
		float d2 = distance(r, ball2);
		float d3 = distance(r, ball3);
		float d4 = distance(r, ball4);
	  	return (r - ball1) / pow(d1, 3.0) + (r - ball2) / pow(d2, 3.0) + (r - ball3) / pow(d3, 3.0) + (r - ball4) / pow(d4, 3.0);
	}

	void main(void) {
	  	vec3 d = normalize(rayDir);

	  	float t1 = (8.0 - eye.y) / d.y;
	  	float t2 = (-8.0 - eye.y) / d.y;
	  	float tstar = max(min(t1, t2), 0.0);
	  	float tend = max(max(t1, t2), 0.0);

		vec3 p = eye + d * tstar;
		vec3 step = d * min((tend - tstar)/580.0, 0.05);

		float h;
		for(int i = 0; i<128; i++){
		    h = f(p);
		    if(h > 0.0){
				step *= 0.5;
				p -= step;
				for(int j=0; j<16; j++) {
				  h = f(p);
				  if(h < 0.0)
				    p += step;
				  else
				    p -= step;
				  step *= 0.5;
				}
				break;
		    }
		    p += step;
		    step *= 1.02;
		}

		vec3 normal = normalize(fGrad(p));

		gl_FragColor = textureCube(envmapTexture, reflect(p - eye, normal));//vec4(normal, 1.0);
		//gl_FragColor = textureCube(envmapTexture, reflect(eye - p, normalize(normal)));

		if(h < -0.0001){
			gl_FragColor = textureCube(envmapTexture, normalize(rayDir));
		}
	}
`;